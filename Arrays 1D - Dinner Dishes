You are planning a dinner menu for an event, and you have a list of N dishes stored in array A, each with a certain cost associated with it. You must select two such dishes, such that the sum of their costs is maximum among all available pairs. Your task is to find and return an integer value representing the sum of such available pair. Return 0 in case of no such pair available.

Input Format

An integer value N representing the number of dishes available.
An integer array A representing the cost of dishes
Constraints

NA

Output Format

Return an integer value representing sum of such pair available. In case, there are no such pair present, return 0.

Sample Input 0

4
1 10 5 15
Sample Output 0

25
Explanation 0

Here, A = (1,10,5,15). The pair with maximum sum would be 10 and 15, since they are the largest in the array of prices and their sum would be 25. Therefore, 25 is returned as the answer

Sample Input 1

3
50 50 50
Sample Output 1

100
Explanation 1

Here, A = (50,50,50). The pair with maximum sum would be 50 and 950, since they are the largest in the array of prices and their sum would be 50. Therefore, 50 is returned as the answer.





import java.io.*;
import java.util.*;

public class Solution 
{

    public static void main(String[] args) 
    {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int arr[] = new int[n];
        for(int i=0; i<n; i++)
        {
            arr[i] = sc.nextInt();
        }
        if(n==0) System.out.print(0);
        else if(n==1) System.out.print(sc.nextInt());
        else
        {
            int largest = arr[0] > arr[1] ? arr[0]:arr[1];
            int s_largest = arr[0] < arr[1] ? arr[0]:arr[1];
            for(int i=2; i<n; i++)
            {
                if((arr[i] > s_largest) && (arr[i] < largest)) s_largest = arr[i];
                else if(arr[i] > largest)
                {
                    s_largest = largest;
                    largest = arr[i];
                }
            }
            System.out.print(s_largest + largest);
        }
    }
}
