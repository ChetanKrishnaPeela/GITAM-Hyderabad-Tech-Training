n a hospital, two departments—Emergency and Outpatient—maintain their own sorted lists of patients based on the time of arrival. When a patient is ready to be treated, the hospital needs to merge these two lists into one sorted list to efficiently manage patient care and ensure that all patients are treated in the order they arrived.

For example, if the Emergency department has patients arriving at [1, 3, 5] (representing time of arrival in hours) and the Outpatient department has patients arriving at [2, 4, 6], the hospital must merge these lists to ensure the treatment occurs in the correct order. Merge two sorted linked lists into one sorted linked list

Input Format

The first line contains an integer n, representing the number of nodes in the first list.
The next line contains n integers representing the sorted values in the first list.
The following line contains an integer m, representing the number of nodes in the second list.
The last line contains m integers representing the sorted values in the second list.
Constraints

NA

Output Format

The output is a single sorted linked list containing all the nodes from both lists.

Sample Input 0

3
1 3 5
3
2 4 6
Sample Output 0

1 2 3 4 5 6
Explanation 0

The first department (Emergency) has patients arriving at [1, 3, 5], and the second department (Outpatient) has patients arriving at [2, 4, 6].

Start with the first patient from each list: compare 1 (from the Emergency list) and 2 (from the Outpatient list). Since 1 is smaller, it is added to the merged list.

Next, compare 3 and 2. Since 2 is smaller, it is added next.

Continue comparing the remaining elements in both lists until all patients are added to the merged list:

Merge steps:

1 (from Emergency)

2 (from Outpatient)

3 (from Emergency)

4 (from Outpatient)

5 (from Emergency)

6 (from Outpatient)

The merged list is [1, 2, 3, 4, 5, 6], ensuring that patients are treated in the order of their arrival.

Sample Input 1

2
5 15
4
1 2 3 10
Sample Output 1

1 2 3 5 10 15
Explanation 1

The first department (Emergency) has patients arriving at [5, 15].

The second department (Outpatient) has patients arriving at [1, 2, 3, 10].

Start with the first patient from each list: compare 5 (from the Emergency list) and 1 (from the Outpatient list). Since 1 is smaller, it is added to the merged list.

Next, compare 5 and 2. Since 2 is smaller, it is added next.

Next, compare 5 and 3. Since 3 is smaller, it is added next.

Finally, the remaining patients 5 and 10 are added in order.

The merged list is [1, 2, 3, 5, 10, 15], ensuring that patients are treated in the order of their arrival.








import java.util.*;

class ListNode {
    int val;
    ListNode next;
    ListNode(int val) {
        this.val = val;
    }
}

public class MergeSortedLinkedLists {
    public static ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;

        while (l1 != null && l2 != null) {
            if (l1.val <= l2.val) {
                current.next = l1;
                l1 = l1.next;
            } else {
                current.next = l2;
                l2 = l2.next;
            }
            current = current.next;
        }

        if (l1 != null) current.next = l1;
        if (l2 != null) current.next = l2;

        return dummy.next;
    }

    public static void printList(ListNode head) {
        ListNode temp = head;
        while (temp != null) {
            System.out.print(temp.val + " ");
            temp = temp.next;
        }
        System.out.println();
    }

    public static ListNode createList(int[] arr) {
        if (arr.length == 0) return null;
        ListNode head = new ListNode(arr[0]);
        ListNode current = head;
        for (int i = 1; i < arr.length; i++) {
            current.next = new ListNode(arr[i]);
            current = current.next;
        }
        return head;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] list1Arr = new int[n];
        for (int i = 0; i < n; i++) list1Arr[i] = sc.nextInt();
        int m = sc.nextInt();
        int[] list2Arr = new int[m];
        for (int i = 0; i < m; i++) list2Arr[i] = sc.nextInt();
        ListNode l1 = createList(list1Arr);
        ListNode l2 = createList(list2Arr);
        ListNode merged = mergeTwoLists(l1, l2);
        printList(merged);
    }
}
