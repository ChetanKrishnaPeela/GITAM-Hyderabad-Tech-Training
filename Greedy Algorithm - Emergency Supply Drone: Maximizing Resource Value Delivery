You are designing a software system for emergency supply drones that deliver aid during natural disasters. Each drone has a limited weight capacity and must be loaded with the most valuable combination of resources (food, medicine, etc.).

Each supply item has:

A weight.
A value (representing usefulness or market price).
The drone can carry fractions of items if needed. Your task is to write a function to determine the maximum total value that can be carried in the drone without exceeding its weight limit.

Given the weights and values of n items and a drone capacity W, return the maximum value that can be carried in the knapsack using fractional parts of items if necessary.

Input Format

First line: two integers n (number of items) and W (capacity of the drone).
Next n lines: each contains two integers value and weight for each item.
Constraints

NA

Output Format

A single floating-point number representing the maximum value that can be carried, rounded to 2 decimal places.

Sample Input 0

3 50
60 10
100 20
120 30
Sample Output 0

240.00
Explanation 0

Items sorted by value/weight ratio:

(60/10 = 6.0)
(100/20 = 5.0)
(120/30 = 4.0)
Pick item 1 (10 kg, full), item 2 (20 kg, full), and 20 kg of item 3 (2/3 of it = 80 value).

Total value = 60 + 100 + 80 = 240.00

Sample Input 1

2 10
100 5
60 10
Sample Output 1

130.00
Explanation 1

Take all of item 1 (5kg = 100).
Remaining capacity = 5kg. Take 5kg of item 2 (half = 30).
Total value = 100 + 30 = 130.00






import java.util.*;

public class Main {

    static class Item {
        int value, weight;
        double ratio;

        Item(int value, int weight) {
            this.value = value;
            this.weight = weight;
            this.ratio = (double) value / weight;
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt(); 
        int W = sc.nextInt(); 

        Item[] items = new Item[n];

        for (int i = 0; i < n; i++) {
            int value = sc.nextInt();
            int weight = sc.nextInt();
            items[i] = new Item(value, weight);
        }

        Arrays.sort(items, (a, b) -> Double.compare(b.ratio, a.ratio));

        double totalValue = 0.0;
        int currentWeight = 0;

        for (Item item : items) {
            if (currentWeight + item.weight <= W) {
                totalValue += item.value;
                currentWeight += item.weight;
            } else {
                int remaining = W - currentWeight;
                totalValue += item.ratio * remaining;
                break; 
            }
        }

        System.out.printf("%.2f\n", totalValue);
        sc.close();
    }
}
