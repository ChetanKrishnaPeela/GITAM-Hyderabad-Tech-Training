You are tasked with designing a transportation system in a city where each intersection is represented as a node and each road connecting the intersections is represented as an edge with a specific weight (cost to travel). Your goal is to create a representation of this weighted graph and display the adjacency list.

Input Format

The first line contains two integers n (the number of intersections) and m (the number of roads).
Each of the next m lines contains three integers u, v, and w, where u and v are the intersection IDs, and w is the weight of the edge (cost to travel between intersections u and v).
Constraints

NA

Output Format

Print the adjacency list representation of the weighted graph, where each line corresponds to an intersection and lists its connected intersections along with the corresponding weights.

Sample Input 0

5 6
1 2 4
1 3 3
2 3 1
2 4 2
3 5 5
4 5 3
Sample Output 0

1 -> (2, 4) -> (3, 3)
2 -> (1, 4) -> (3, 1) -> (4, 2)
3 -> (1, 3) -> (2, 1) -> (5, 5)
4 -> (2, 2) -> (5, 3)
5 -> (3, 5) -> (4, 3)
Explanation 0

In the given input:

There are 5 intersections (nodes) and 6 roads (edges).
The roads and their costs are specified as pairs of intersections with weights.
The output represents the adjacency list for each intersection, displaying which intersections are directly connected and the cost to travel to them.
Sample Input 1

4 5
1 2 5
1 3 2
2 4 3
3 4 7
1 4 8
Sample Output 1

1 -> (2, 5) -> (3, 2) -> (4, 8)
2 -> (1, 5) -> (4, 3)
3 -> (1, 2) -> (4, 7)
4 -> (2, 3) -> (3, 7) -> (1, 8)







import java.util.*;

public class WeightedGraph {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();

        ArrayList<ArrayList<int[]>> adjList = new ArrayList<>();
        for (int i = 0; i <= n; i++) 
        {
            adjList.add(new ArrayList<>());
        }
        for (int i = 0; i < m; i++) 
        {
            int u = sc.nextInt();
            int v = sc.nextInt();
            int w = sc.nextInt();

            adjList.get(u).add(new int[]{v, w});
            adjList.get(v).add(new int[]{u, w});
        }
        for (int i = 1; i <= n; i++) 
        {
            System.out.print(i);
            for (int[] edge : adjList.get(i)) 
            {
                System.out.print(" -> (" + edge[0] + ", " + edge[1] + ")");
            }
            System.out.println();
        }

        sc.close();
    }
}
